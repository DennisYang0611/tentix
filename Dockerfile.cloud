# syntax = docker/dockerfile:1

# 设置基础镜像
ARG BUN_VERSION=1.2.12
FROM oven/bun:${BUN_VERSION}-slim as base

# 设置工作目录
WORKDIR /app

# 设置生产环境
ENV NODE_ENV="production"

# 缓存依赖阶段
FROM base as deps

# 安装系统依赖
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential pkg-config python-is-python3 ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 首先复制锁文件和package.json，利用Docker缓存层
COPY bun.lock package.json ./
COPY packages/ ./packages/
COPY frontend/package.json ./frontend/
COPY server/package.json ./server/

# 安装依赖
RUN bun install --frozen-lockfile

# 构建阶段
FROM deps as build

# 复制所有源代码
COPY . .

# 构建前端
WORKDIR /app/frontend
RUN bun run build:prod

# 构建服务端
WORKDIR /app/server
RUN bun run build:prod

# 删除不必要的文件，减小体积
RUN find /app -type d -name "node_modules" -exec rm -rf {} +

# 最终运行阶段
FROM base

# 复制构建产物
COPY --from=build /app/server/dist /app/dist
COPY --from=build /app/frontend/dist /app/dist/frontend

# 复制必要的包
COPY --from=build /app/package.json /app/
COPY --from=deps /app/node_modules /app/node_modules

# 设置健康检查
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# 暴露端口
EXPOSE 3000

# 启动命令
CMD ["bun", "run", "start"] 