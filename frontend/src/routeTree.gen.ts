/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserImport } from './routes/user'
import { Route as StaffImport } from './routes/staff'
import { Route as NotLoginImport } from './routes/notLogin'
import { Route as IndexImport } from './routes/index'
import { Route as UserDashboardImport } from './routes/user/dashboard'
import { Route as StaffDashboardImport } from './routes/staff/dashboard'
import { Route as UserSettingIndexImport } from './routes/user/setting/index'
import { Route as UserNewticketIndexImport } from './routes/user/newticket/index'
import { Route as UserTicketsListImport } from './routes/user/tickets/list'
import { Route as UserTicketsIdImport } from './routes/user/tickets/$id'
import { Route as StaffTicketsListImport } from './routes/staff/tickets/list'
import { Route as StaffTicketsAllImport } from './routes/staff/tickets/all'
import { Route as StaffTicketsIdImport } from './routes/staff/tickets/$id'

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const StaffRoute = StaffImport.update({
  id: '/staff',
  path: '/staff',
  getParentRoute: () => rootRoute,
} as any)

const NotLoginRoute = NotLoginImport.update({
  id: '/notLogin',
  path: '/notLogin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserDashboardRoute = UserDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => UserRoute,
} as any)

const StaffDashboardRoute = StaffDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => StaffRoute,
} as any)

const UserSettingIndexRoute = UserSettingIndexImport.update({
  id: '/setting/',
  path: '/setting/',
  getParentRoute: () => UserRoute,
} as any)

const UserNewticketIndexRoute = UserNewticketIndexImport.update({
  id: '/newticket/',
  path: '/newticket/',
  getParentRoute: () => UserRoute,
} as any)

const UserTicketsListRoute = UserTicketsListImport.update({
  id: '/tickets/list',
  path: '/tickets/list',
  getParentRoute: () => UserRoute,
} as any)

const UserTicketsIdRoute = UserTicketsIdImport.update({
  id: '/tickets/$id',
  path: '/tickets/$id',
  getParentRoute: () => UserRoute,
} as any)

const StaffTicketsListRoute = StaffTicketsListImport.update({
  id: '/tickets/list',
  path: '/tickets/list',
  getParentRoute: () => StaffRoute,
} as any)

const StaffTicketsAllRoute = StaffTicketsAllImport.update({
  id: '/tickets/all',
  path: '/tickets/all',
  getParentRoute: () => StaffRoute,
} as any)

const StaffTicketsIdRoute = StaffTicketsIdImport.update({
  id: '/tickets/$id',
  path: '/tickets/$id',
  getParentRoute: () => StaffRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/notLogin': {
      id: '/notLogin'
      path: '/notLogin'
      fullPath: '/notLogin'
      preLoaderRoute: typeof NotLoginImport
      parentRoute: typeof rootRoute
    }
    '/staff': {
      id: '/staff'
      path: '/staff'
      fullPath: '/staff'
      preLoaderRoute: typeof StaffImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/staff/dashboard': {
      id: '/staff/dashboard'
      path: '/dashboard'
      fullPath: '/staff/dashboard'
      preLoaderRoute: typeof StaffDashboardImport
      parentRoute: typeof StaffImport
    }
    '/user/dashboard': {
      id: '/user/dashboard'
      path: '/dashboard'
      fullPath: '/user/dashboard'
      preLoaderRoute: typeof UserDashboardImport
      parentRoute: typeof UserImport
    }
    '/staff/tickets/$id': {
      id: '/staff/tickets/$id'
      path: '/tickets/$id'
      fullPath: '/staff/tickets/$id'
      preLoaderRoute: typeof StaffTicketsIdImport
      parentRoute: typeof StaffImport
    }
    '/staff/tickets/all': {
      id: '/staff/tickets/all'
      path: '/tickets/all'
      fullPath: '/staff/tickets/all'
      preLoaderRoute: typeof StaffTicketsAllImport
      parentRoute: typeof StaffImport
    }
    '/staff/tickets/list': {
      id: '/staff/tickets/list'
      path: '/tickets/list'
      fullPath: '/staff/tickets/list'
      preLoaderRoute: typeof StaffTicketsListImport
      parentRoute: typeof StaffImport
    }
    '/user/tickets/$id': {
      id: '/user/tickets/$id'
      path: '/tickets/$id'
      fullPath: '/user/tickets/$id'
      preLoaderRoute: typeof UserTicketsIdImport
      parentRoute: typeof UserImport
    }
    '/user/tickets/list': {
      id: '/user/tickets/list'
      path: '/tickets/list'
      fullPath: '/user/tickets/list'
      preLoaderRoute: typeof UserTicketsListImport
      parentRoute: typeof UserImport
    }
    '/user/newticket/': {
      id: '/user/newticket/'
      path: '/newticket'
      fullPath: '/user/newticket'
      preLoaderRoute: typeof UserNewticketIndexImport
      parentRoute: typeof UserImport
    }
    '/user/setting/': {
      id: '/user/setting/'
      path: '/setting'
      fullPath: '/user/setting'
      preLoaderRoute: typeof UserSettingIndexImport
      parentRoute: typeof UserImport
    }
  }
}

// Create and export the route tree

interface StaffRouteChildren {
  StaffDashboardRoute: typeof StaffDashboardRoute
  StaffTicketsIdRoute: typeof StaffTicketsIdRoute
  StaffTicketsAllRoute: typeof StaffTicketsAllRoute
  StaffTicketsListRoute: typeof StaffTicketsListRoute
}

const StaffRouteChildren: StaffRouteChildren = {
  StaffDashboardRoute: StaffDashboardRoute,
  StaffTicketsIdRoute: StaffTicketsIdRoute,
  StaffTicketsAllRoute: StaffTicketsAllRoute,
  StaffTicketsListRoute: StaffTicketsListRoute,
}

const StaffRouteWithChildren = StaffRoute._addFileChildren(StaffRouteChildren)

interface UserRouteChildren {
  UserDashboardRoute: typeof UserDashboardRoute
  UserTicketsIdRoute: typeof UserTicketsIdRoute
  UserTicketsListRoute: typeof UserTicketsListRoute
  UserNewticketIndexRoute: typeof UserNewticketIndexRoute
  UserSettingIndexRoute: typeof UserSettingIndexRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserDashboardRoute: UserDashboardRoute,
  UserTicketsIdRoute: UserTicketsIdRoute,
  UserTicketsListRoute: UserTicketsListRoute,
  UserNewticketIndexRoute: UserNewticketIndexRoute,
  UserSettingIndexRoute: UserSettingIndexRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/notLogin': typeof NotLoginRoute
  '/staff': typeof StaffRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/staff/dashboard': typeof StaffDashboardRoute
  '/user/dashboard': typeof UserDashboardRoute
  '/staff/tickets/$id': typeof StaffTicketsIdRoute
  '/staff/tickets/all': typeof StaffTicketsAllRoute
  '/staff/tickets/list': typeof StaffTicketsListRoute
  '/user/tickets/$id': typeof UserTicketsIdRoute
  '/user/tickets/list': typeof UserTicketsListRoute
  '/user/newticket': typeof UserNewticketIndexRoute
  '/user/setting': typeof UserSettingIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/notLogin': typeof NotLoginRoute
  '/staff': typeof StaffRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/staff/dashboard': typeof StaffDashboardRoute
  '/user/dashboard': typeof UserDashboardRoute
  '/staff/tickets/$id': typeof StaffTicketsIdRoute
  '/staff/tickets/all': typeof StaffTicketsAllRoute
  '/staff/tickets/list': typeof StaffTicketsListRoute
  '/user/tickets/$id': typeof UserTicketsIdRoute
  '/user/tickets/list': typeof UserTicketsListRoute
  '/user/newticket': typeof UserNewticketIndexRoute
  '/user/setting': typeof UserSettingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/notLogin': typeof NotLoginRoute
  '/staff': typeof StaffRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/staff/dashboard': typeof StaffDashboardRoute
  '/user/dashboard': typeof UserDashboardRoute
  '/staff/tickets/$id': typeof StaffTicketsIdRoute
  '/staff/tickets/all': typeof StaffTicketsAllRoute
  '/staff/tickets/list': typeof StaffTicketsListRoute
  '/user/tickets/$id': typeof UserTicketsIdRoute
  '/user/tickets/list': typeof UserTicketsListRoute
  '/user/newticket/': typeof UserNewticketIndexRoute
  '/user/setting/': typeof UserSettingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/notLogin'
    | '/staff'
    | '/user'
    | '/staff/dashboard'
    | '/user/dashboard'
    | '/staff/tickets/$id'
    | '/staff/tickets/all'
    | '/staff/tickets/list'
    | '/user/tickets/$id'
    | '/user/tickets/list'
    | '/user/newticket'
    | '/user/setting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/notLogin'
    | '/staff'
    | '/user'
    | '/staff/dashboard'
    | '/user/dashboard'
    | '/staff/tickets/$id'
    | '/staff/tickets/all'
    | '/staff/tickets/list'
    | '/user/tickets/$id'
    | '/user/tickets/list'
    | '/user/newticket'
    | '/user/setting'
  id:
    | '__root__'
    | '/'
    | '/notLogin'
    | '/staff'
    | '/user'
    | '/staff/dashboard'
    | '/user/dashboard'
    | '/staff/tickets/$id'
    | '/staff/tickets/all'
    | '/staff/tickets/list'
    | '/user/tickets/$id'
    | '/user/tickets/list'
    | '/user/newticket/'
    | '/user/setting/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotLoginRoute: typeof NotLoginRoute
  StaffRoute: typeof StaffRouteWithChildren
  UserRoute: typeof UserRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotLoginRoute: NotLoginRoute,
  StaffRoute: StaffRouteWithChildren,
  UserRoute: UserRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/notLogin",
        "/staff",
        "/user"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/notLogin": {
      "filePath": "notLogin.tsx"
    },
    "/staff": {
      "filePath": "staff.tsx",
      "children": [
        "/staff/dashboard",
        "/staff/tickets/$id",
        "/staff/tickets/all",
        "/staff/tickets/list"
      ]
    },
    "/user": {
      "filePath": "user.tsx",
      "children": [
        "/user/dashboard",
        "/user/tickets/$id",
        "/user/tickets/list",
        "/user/newticket/",
        "/user/setting/"
      ]
    },
    "/staff/dashboard": {
      "filePath": "staff/dashboard.tsx",
      "parent": "/staff"
    },
    "/user/dashboard": {
      "filePath": "user/dashboard.tsx",
      "parent": "/user"
    },
    "/staff/tickets/$id": {
      "filePath": "staff/tickets/$id.tsx",
      "parent": "/staff"
    },
    "/staff/tickets/all": {
      "filePath": "staff/tickets/all.tsx",
      "parent": "/staff"
    },
    "/staff/tickets/list": {
      "filePath": "staff/tickets/list.tsx",
      "parent": "/staff"
    },
    "/user/tickets/$id": {
      "filePath": "user/tickets/$id.tsx",
      "parent": "/user"
    },
    "/user/tickets/list": {
      "filePath": "user/tickets/list.tsx",
      "parent": "/user"
    },
    "/user/newticket/": {
      "filePath": "user/newticket/index.tsx",
      "parent": "/user"
    },
    "/user/setting/": {
      "filePath": "user/setting/index.tsx",
      "parent": "/user"
    }
  }
}
ROUTE_MANIFEST_END */
